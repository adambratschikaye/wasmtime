[package]
name = "wasmtime-compile"
version.workspace = true
authors.workspace = true
description = "---"
documentation = "https://docs.rs/wasmtime-compile"
license = "Apache-2.0 WITH LLVM-exception"
categories = ["wasm"]
keywords = ["webassembly", "wasm"]
repository = "https://github.com/bytecodealliance/wasmtime"
edition.workspace = true

[dependencies]
wasmtime-environ = { workspace = true }
wasmtime-jit = { workspace = true }
wasmtime-cranelift = { workspace = true, optional = true }
wasmtime-winch = { workspace = true, optional = true }
# wasmtime-jit-debug = { workspace = true, features = [
#   "perf_jitdump",
# ], optional = true }
target-lexicon = { workspace = true }
anyhow = { workspace = true }
# cfg-if = { workspace = true }
# gimli = { workspace = true }
object = { workspace = true }
# serde = "1.0.188"
# serde_derive = "1.0.188"
# addr2line = { version = "0.21.0", default-features = false, optional = true }
# bincode = "1.2.1"
# rustc-demangle = { version = "0.1.16", optional = true }
# cpp_demangle = { version = "0.3.2", optional = true }
# log = { workspace = true }
# wasmtime-jit-icache-coherence = { workspace = true }

# [target.'cfg(target_os = "linux")'.dependencies]
# rustix = { workspace = true, features = ['thread'] }

# [target.'cfg(target_os = "windows")'.dependencies.windows-sys]
# workspace = true
# features = ["Win32_System_Diagnostics_Debug"]

# [target.'cfg(all(target_arch = "x86_64", not(target_os = "android")))'.dependencies]
# ittapi = { version = "0.4.0", optional = true }

# [features]
# profiling = ['dep:wasmtime-jit-debug', 'dep:ittapi']
# demangle = ['dep:rustc-demangle', 'dep:cpp_demangle']

[features]
default = ['cranelift']

# An on-by-default feature enabling runtime compilation of WebAssembly modules
# with the Cranelift compiler. Cranelift is the default compilation backend of
# Wasmtime. If disabled then WebAssembly modules can only be created from
# precompiled WebAssembly modules.
cranelift = ["dep:wasmtime-cranelift"]

# Enables support for winch, the WebAssembly baseline compiler. The Winch compiler
# strategy in `Config` will be available. It is currently in active development
# and shouldn't be used in production applications.
winch = ["dep:wasmtime-winch"]
